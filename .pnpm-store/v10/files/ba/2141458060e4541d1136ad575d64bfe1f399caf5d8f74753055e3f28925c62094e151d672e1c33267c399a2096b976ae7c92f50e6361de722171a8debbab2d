'use client';

import * as React from 'react';
import { useRenderElement } from "../../utils/useRenderElement.js";
import { CompositeRoot } from "../../composite/root/CompositeRoot.js";
import { ToolbarRootContext } from "./ToolbarRootContext.js";

/**
 * A container for grouping a set of controls, such as buttons, toggle groups, or menus.
 * Renders a `<div>` element.
 *
 * Documentation: [Base UI Toolbar](https://base-ui.com/react/components/toolbar)
 */
import { jsx as _jsx } from "react/jsx-runtime";
export const ToolbarRoot = /*#__PURE__*/React.forwardRef(function ToolbarRoot(componentProps, forwardedRef) {
  const {
    cols = 1,
    disabled = false,
    loop = true,
    orientation = 'horizontal',
    className,
    render,
    ...elementProps
  } = componentProps;
  const [itemMap, setItemMap] = React.useState(() => new Map());
  const disabledIndices = React.useMemo(() => {
    const output = [];
    for (const itemMetadata of itemMap.values()) {
      if (itemMetadata?.index && !itemMetadata.focusableWhenDisabled) {
        output.push(itemMetadata.index);
      }
    }
    return output;
  }, [itemMap]);
  const toolbarRootContext = React.useMemo(() => ({
    disabled,
    orientation,
    setItemMap
  }), [disabled, orientation, setItemMap]);
  const state = React.useMemo(() => ({
    disabled,
    orientation
  }), [disabled, orientation]);
  const element = useRenderElement('div', componentProps, {
    state,
    ref: forwardedRef,
    props: [{
      'aria-orientation': orientation,
      role: 'toolbar'
    }, elementProps]
  });
  return /*#__PURE__*/_jsx(ToolbarRootContext.Provider, {
    value: toolbarRootContext,
    children: /*#__PURE__*/_jsx(CompositeRoot, {
      cols: cols,
      disabledIndices: disabledIndices,
      loop: loop,
      onMapChange: setItemMap,
      orientation: orientation,
      render: element
    })
  });
});
if (process.env.NODE_ENV !== "production") ToolbarRoot.displayName = "ToolbarRoot";