'use client';

import * as React from 'react';
import { useSelectRoot } from "./useSelectRoot.js";
import { SelectRootContext, SelectFloatingContext } from "./SelectRootContext.js";
import { useFieldRootContext } from "../../field/root/FieldRootContext.js";
import { visuallyHidden } from "../../utils/visuallyHidden.js";
import { useForkRef } from "../../utils/useForkRef.js";
import { serializeValue } from "../utils/serialize.js";

/**
 * Groups all parts of the select.
 * Doesnâ€™t render its own HTML element.
 *
 * Documentation: [Base UI Select](https://base-ui.com/react/components/select)
 */
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
export const SelectRoot = function SelectRoot(props) {
  const {
    id,
    value: valueProp,
    defaultValue = null,
    onValueChange,
    open,
    defaultOpen = false,
    onOpenChange,
    name,
    disabled = false,
    readOnly = false,
    required = false,
    modal = true,
    actionsRef,
    inputRef,
    onOpenChangeComplete,
    items
  } = props;
  const {
    rootContext,
    floatingContext,
    value
  } = useSelectRoot({
    id,
    value: valueProp,
    defaultValue,
    onValueChange,
    open,
    defaultOpen,
    onOpenChange,
    name,
    disabled,
    readOnly,
    required,
    modal,
    actionsRef,
    onOpenChangeComplete,
    items
  });
  const store = rootContext.store;
  const {
    setDirty,
    validityData,
    validationMode,
    controlId
  } = useFieldRootContext();
  const ref = useForkRef(inputRef, rootContext.fieldControlValidation.inputRef);
  const serializedValue = React.useMemo(() => serializeValue(value), [value]);
  return /*#__PURE__*/_jsx(SelectRootContext.Provider, {
    value: rootContext,
    children: /*#__PURE__*/_jsxs(SelectFloatingContext.Provider, {
      value: floatingContext,
      children: [props.children, /*#__PURE__*/_jsx("input", {
        ...rootContext.fieldControlValidation.getInputValidationProps({
          onFocus() {
            // Move focus to the trigger element when the hidden input is focused.
            store.state.triggerElement?.focus();
          },
          // Handle browser autofill.
          onChange(event) {
            // Workaround for https://github.com/facebook/react/issues/9023
            if (event.nativeEvent.defaultPrevented) {
              return;
            }
            const nextValue = event.target.value;
            store.set('forceMount', true);
            queueMicrotask(() => {
              const exactValue = rootContext.valuesRef.current.find(v => v === nextValue || typeof value === 'string' && nextValue.toLowerCase() === v.toLowerCase());
              if (exactValue != null) {
                setDirty(exactValue !== validityData.initialValue);
                rootContext.setValue?.(exactValue, event.nativeEvent);
                if (validationMode === 'onChange') {
                  rootContext.fieldControlValidation.commitValidation(exactValue);
                }
              }
            });
          },
          id: id || controlId || undefined,
          name: rootContext.name,
          disabled: rootContext.disabled,
          required: rootContext.required,
          readOnly: rootContext.readOnly,
          value: serializedValue,
          ref,
          style: visuallyHidden,
          tabIndex: -1,
          'aria-hidden': true
        })
      })]
    })
  });
};
if (process.env.NODE_ENV !== "production") SelectRoot.displayName = "SelectRoot";