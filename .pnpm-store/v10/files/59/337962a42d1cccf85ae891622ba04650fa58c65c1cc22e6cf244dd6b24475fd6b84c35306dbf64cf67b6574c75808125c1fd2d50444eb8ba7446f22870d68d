'use client';

import * as React from 'react';
import { useSelectRootContext } from "../root/SelectRootContext.js";
import { useFieldRootContext } from "../../field/root/FieldRootContext.js";
import { pressableTriggerOpenStateMapping } from "../../utils/popupStateMapping.js";
import { fieldValidityMapping } from "../../field/utils/constants.js";
import { useRenderElement } from "../../utils/useRenderElement.js";
import { useSelector } from "../../utils/store/index.js";
import { selectors } from "../store.js";
import { getPseudoElementBounds } from "../../utils/getPseudoElementBounds.js";
import { contains } from "../../floating-ui-react/utils.js";
import { ownerDocument } from "../../utils/owner.js";
import { mergeProps } from "../../merge-props/index.js";
import { useTimeout } from "../../utils/useTimeout.js";
import { useEventCallback } from "../../utils/useEventCallback.js";
import { useForkRef } from "../../utils/index.js";
import { useButton } from "../../use-button/index.js";
const BOUNDARY_OFFSET = 2;
const customStyleHookMapping = {
  ...pressableTriggerOpenStateMapping,
  ...fieldValidityMapping
};

/**
 * A button that opens the select menu.
 * Renders a `<div>` element.
 *
 * Documentation: [Base UI Select](https://base-ui.com/react/components/select)
 */
export const SelectTrigger = /*#__PURE__*/React.forwardRef(function SelectTrigger(componentProps, forwardedRef) {
  const {
    render,
    className,
    disabled: disabledProp = false,
    nativeButton = false,
    ...elementProps
  } = componentProps;
  const {
    state: fieldState,
    disabled: fieldDisabled
  } = useFieldRootContext();
  const {
    store,
    setOpen,
    selectionRef,
    fieldControlValidation,
    readOnly,
    alignItemWithTriggerActiveRef,
    disabled: selectDisabled,
    keyboardActiveRef
  } = useSelectRootContext();
  const disabled = fieldDisabled || selectDisabled || disabledProp;
  const open = useSelector(store, selectors.open);
  const value = useSelector(store, selectors.value);
  const triggerProps = useSelector(store, selectors.triggerProps);
  const positionerElement = useSelector(store, selectors.positionerElement);
  const {
    labelId,
    setTouched,
    setFocused,
    validationMode
  } = useFieldRootContext();
  const triggerRef = React.useRef(null);
  const timeoutFocus = useTimeout();
  const timeoutMouseDown = useTimeout();
  const {
    getButtonProps,
    buttonRef
  } = useButton({
    disabled,
    native: nativeButton
  });
  const setTriggerElement = useEventCallback(element => {
    store.set('triggerElement', element);
  });
  const mergedRef = useForkRef(forwardedRef, triggerRef, buttonRef, setTriggerElement);
  const timeout1 = useTimeout();
  const timeout2 = useTimeout();
  React.useEffect(() => {
    if (open) {
      // mousedown -> move to unselected item -> mouseup should not select within 200ms.
      timeout2.start(200, () => {
        selectionRef.current.allowUnselectedMouseUp = true;

        // mousedown -> mouseup on selected item should not select within 400ms.
        timeout1.start(200, () => {
          selectionRef.current.allowSelectedMouseUp = true;
        });
      });
      return () => {
        timeout1.clear();
        timeout2.clear();
      };
    }
    selectionRef.current = {
      allowSelectedMouseUp: false,
      allowUnselectedMouseUp: false,
      allowSelect: true
    };
    timeoutMouseDown.clear();
    return undefined;
  }, [open, selectionRef, timeoutMouseDown, timeout1, timeout2]);
  const props = mergeProps(triggerProps, {
    'aria-labelledby': labelId,
    'aria-readonly': readOnly || undefined,
    tabIndex: disabled ? -1 : 0,
    ref: mergedRef,
    onFocus(event) {
      setFocused(true);
      // The popup element shouldn't obscure the focused trigger.
      if (open && alignItemWithTriggerActiveRef.current) {
        setOpen(false, event.nativeEvent, 'focus-out');
      }

      // Saves a re-render on initial click: `forceMount === true` mounts
      // the items before `open === true`. We could sync those cycles better
      // without a timeout, but this is enough for now.
      //
      // XXX: might be causing `act()` warnings.
      timeoutFocus.start(0, () => {
        store.set('forceMount', true);
      });
    },
    onBlur() {
      setTouched(true);
      setFocused(false);
      if (validationMode === 'onBlur') {
        fieldControlValidation.commitValidation(value);
      }
    },
    onPointerMove({
      pointerType
    }) {
      keyboardActiveRef.current = false;
      store.set('touchModality', pointerType === 'touch');
    },
    onPointerDown({
      pointerType
    }) {
      store.set('touchModality', pointerType === 'touch');
    },
    onKeyDown(event) {
      keyboardActiveRef.current = true;
      if (event.key === 'ArrowDown') {
        setOpen(true, event.nativeEvent, 'list-navigation');
      }
    },
    onMouseDown(event) {
      if (open) {
        return;
      }
      const doc = ownerDocument(event.currentTarget);
      function handleMouseUp(mouseEvent) {
        if (!triggerRef.current) {
          return;
        }
        const mouseUpTarget = mouseEvent.target;

        // Early return if clicked on trigger element or its children
        if (contains(triggerRef.current, mouseUpTarget) || contains(positionerElement, mouseUpTarget) || mouseUpTarget === triggerRef.current) {
          return;
        }
        const bounds = getPseudoElementBounds(triggerRef.current);
        if (mouseEvent.clientX >= bounds.left - BOUNDARY_OFFSET && mouseEvent.clientX <= bounds.right + BOUNDARY_OFFSET && mouseEvent.clientY >= bounds.top - BOUNDARY_OFFSET && mouseEvent.clientY <= bounds.bottom + BOUNDARY_OFFSET) {
          return;
        }
        setOpen(false, mouseEvent, 'cancel-open');
      }

      // Firefox can fire this upon mousedown
      timeoutMouseDown.start(0, () => {
        doc.addEventListener('mouseup', handleMouseUp, {
          once: true
        });
      });
    }
  }, fieldControlValidation.getValidationProps, elementProps, getButtonProps);

  // ensure nested useButton does not overwrite the combobox role:
  // <Toolbar.Button render={<Select.Trigger />} />
  props.role = 'combobox';
  const state = React.useMemo(() => ({
    ...fieldState,
    open,
    disabled
  }), [fieldState, open, disabled]);
  return useRenderElement('div', componentProps, {
    ref: [forwardedRef, triggerRef],
    state,
    customStyleHookMapping,
    props
  });
});
if (process.env.NODE_ENV !== "production") SelectTrigger.displayName = "SelectTrigger";