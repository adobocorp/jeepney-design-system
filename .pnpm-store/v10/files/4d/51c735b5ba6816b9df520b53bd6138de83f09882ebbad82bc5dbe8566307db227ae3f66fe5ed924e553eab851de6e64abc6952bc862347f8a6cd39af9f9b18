'use client';

import * as React from 'react';
import { MeterRootContext } from "./MeterRootContext.js";
import { formatNumber } from "../../utils/formatNumber.js";
import { useLatestRef } from "../../utils/useLatestRef.js";
import { valueToPercent } from "../../utils/valueToPercent.js";
import { useRenderElement } from "../../utils/useRenderElement.js";
import { jsx as _jsx } from "react/jsx-runtime";
function formatValue(value, locale, format) {
  if (!format) {
    return formatNumber(value / 100, locale, {
      style: 'percent'
    });
  }
  return formatNumber(value, locale, format);
}

/**
 * Groups all parts of the meter and provides the value for screen readers.
 * Renders a `<div>` element.
 *
 * Documentation: [Base UI Meter](https://base-ui.com/react/components/meter)
 */
export const MeterRoot = /*#__PURE__*/React.forwardRef(function MeterRoot(componentProps, forwardedRef) {
  const {
    format,
    getAriaValueText,
    locale,
    max = 100,
    min = 0,
    value,
    render,
    className,
    ...elementProps
  } = componentProps;
  const formatOptionsRef = useLatestRef(format);
  const [labelId, setLabelId] = React.useState();
  const percentageValue = valueToPercent(value, min, max);
  const formattedValue = formatValue(value, locale, formatOptionsRef.current);
  let ariaValuetext = `${percentageValue}%`;
  if (getAriaValueText) {
    ariaValuetext = getAriaValueText(formattedValue, value);
  } else if (format) {
    ariaValuetext = formattedValue;
  }
  const defaultProps = {
    'aria-labelledby': labelId,
    'aria-valuemax': max,
    'aria-valuemin': min,
    'aria-valuenow': percentageValue / 100,
    'aria-valuetext': ariaValuetext,
    role: 'meter'
  };
  const contextValue = React.useMemo(() => ({
    formattedValue,
    max,
    min,
    percentageValue,
    setLabelId,
    value
  }), [formattedValue, max, min, percentageValue, setLabelId, value]);
  const element = useRenderElement('div', componentProps, {
    ref: forwardedRef,
    props: [defaultProps, elementProps]
  });
  return /*#__PURE__*/_jsx(MeterRootContext.Provider, {
    value: contextValue,
    children: element
  });
});
if (process.env.NODE_ENV !== "production") MeterRoot.displayName = "MeterRoot";