import * as React from 'react';
import { useClick, useDismiss, useFloatingRootContext, useInteractions, useListNavigation, useRole, useTypeahead } from "../../floating-ui-react/index.js";
import { useFieldControlValidation } from "../../field/control/useFieldControlValidation.js";
import { useFieldRootContext } from "../../field/root/FieldRootContext.js";
import { useBaseUiId } from "../../utils/useBaseUiId.js";
import { useLazyRef } from "../../utils/useLazyRef.js";
import { useOnFirstRender } from "../../utils/useOnFirstRender.js";
import { useControlled } from "../../utils/useControlled.js";
import { useTransitionStatus } from "../../utils/index.js";
import { useModernLayoutEffect } from "../../utils/useModernLayoutEffect.js";
import { useEventCallback } from "../../utils/useEventCallback.js";
import { useSelector, Store } from "../../utils/store/index.js";
import { useTimeout } from "../../utils/useTimeout.js";
import { warn } from "../../utils/warn.js";
import { selectors } from "../store.js";
import { translateOpenChangeReason } from "../../utils/translateOpenChangeReason.js";
import { useOpenChangeComplete } from "../../utils/useOpenChangeComplete.js";
import { useFormContext } from "../../form/FormContext.js";
import { useLatestRef } from "../../utils/useLatestRef.js";
import { useField } from "../../field/useField.js";
const EMPTY_ARRAY = [];
export function useSelectRoot(params) {
  const {
    id: idProp,
    disabled: disabledProp = false,
    readOnly = false,
    required = false,
    modal = false,
    name: nameProp,
    onOpenChangeComplete,
    items
  } = params;
  const {
    clearErrors
  } = useFormContext();
  const {
    setDirty,
    validityData,
    validationMode,
    setControlId,
    setFilled,
    name: fieldName,
    disabled: fieldDisabled
  } = useFieldRootContext();
  const fieldControlValidation = useFieldControlValidation();
  const id = useBaseUiId(idProp);
  const disabled = fieldDisabled || disabledProp;
  const name = fieldName ?? nameProp;
  useModernLayoutEffect(() => {
    setControlId(id);
    return () => {
      setControlId(undefined);
    };
  }, [id, setControlId]);
  const [value, setValueUnwrapped] = useControlled({
    controlled: params.value,
    default: params.defaultValue,
    name: 'Select',
    state: 'value'
  });
  const [open, setOpenUnwrapped] = useControlled({
    controlled: params.open,
    default: params.defaultOpen,
    name: 'Select',
    state: 'open'
  });
  const listRef = React.useRef([]);
  const labelsRef = React.useRef([]);
  const popupRef = React.useRef(null);
  const valueRef = React.useRef(null);
  const valuesRef = React.useRef([]);
  const typingRef = React.useRef(false);
  const keyboardActiveRef = React.useRef(false);
  const selectedItemTextRef = React.useRef(null);
  const selectionRef = React.useRef({
    allowSelectedMouseUp: false,
    allowUnselectedMouseUp: false,
    allowSelect: false
  });
  const alignItemWithTriggerActiveRef = React.useRef(false);
  const highlightTimeout = useTimeout();
  const {
    mounted,
    setMounted,
    transitionStatus
  } = useTransitionStatus(open);
  const store = useLazyRef(() => new Store({
    id,
    modal,
    value,
    label: '',
    open,
    mounted,
    forceMount: false,
    transitionStatus,
    items,
    touchModality: false,
    activeIndex: null,
    selectedIndex: null,
    popupProps: {},
    triggerProps: {},
    triggerElement: null,
    positionerElement: null,
    scrollUpArrowVisible: false,
    scrollDownArrowVisible: false
  })).current;
  const initialValueRef = React.useRef(value);
  useModernLayoutEffect(() => {
    // Ensure the values and labels are registered for programmatic value changes.
    if (value !== initialValueRef.current) {
      store.set('forceMount', true);
    }
  }, [store, value]);
  const activeIndex = useSelector(store, selectors.activeIndex);
  const selectedIndex = useSelector(store, selectors.selectedIndex);
  const triggerElement = useSelector(store, selectors.triggerElement);
  const positionerElement = useSelector(store, selectors.positionerElement);
  const controlRef = useLatestRef(store.state.triggerElement);
  const commitValidation = fieldControlValidation.commitValidation;
  useField({
    id,
    commitValidation,
    value,
    controlRef,
    name,
    getValue: () => value
  });
  const prevValueRef = React.useRef(value);
  useModernLayoutEffect(() => {
    setFilled(value !== null);
  }, [value, setFilled]);
  useModernLayoutEffect(() => {
    if (prevValueRef.current === value) {
      return;
    }
    const index = valuesRef.current.indexOf(value);
    store.apply({
      selectedIndex: index === -1 ? null : index,
      label: labelsRef.current[index] ?? ''
    });
    clearErrors(name);
    setDirty(value !== validityData.initialValue);
    commitValidation(value, validationMode !== 'onChange');
    if (validationMode === 'onChange') {
      commitValidation(value);
    }
  }, [value, commitValidation, clearErrors, name, validationMode, store, setDirty, validityData.initialValue, setFilled]);
  useModernLayoutEffect(() => {
    prevValueRef.current = value;
  }, [value]);
  const setOpen = useEventCallback((nextOpen, event, reason) => {
    params.onOpenChange?.(nextOpen, event, reason);
    setOpenUnwrapped(nextOpen);

    // Workaround `enableFocusInside` in Floating UI setting `tabindex=0` of a non-highlighted
    // option upon close when tabbing out due to `keepMounted=true`:
    // https://github.com/floating-ui/floating-ui/pull/3004/files#diff-962a7439cdeb09ea98d4b622a45d517bce07ad8c3f866e089bda05f4b0bbd875R194-R199
    // This otherwise causes options to retain `tabindex=0` incorrectly when the popup is closed
    // when tabbing outside.
    if (!nextOpen && store.state.activeIndex !== null) {
      const activeOption = listRef.current[store.state.activeIndex];
      // Wait for Floating UI's focus effect to have fired
      queueMicrotask(() => {
        activeOption?.setAttribute('tabindex', '-1');
      });
    }
  });
  const handleUnmount = useEventCallback(() => {
    setMounted(false);
    store.set('activeIndex', null);
    onOpenChangeComplete?.(false);
  });
  useOpenChangeComplete({
    enabled: !params.actionsRef,
    open,
    ref: popupRef,
    onComplete() {
      if (!open) {
        handleUnmount();
      }
    }
  });
  React.useImperativeHandle(params.actionsRef, () => ({
    unmount: handleUnmount
  }), [handleUnmount]);
  const setValue = useEventCallback((nextValue, event) => {
    params.onValueChange?.(nextValue, event);
    setValueUnwrapped(nextValue);
  });
  const hasRegisteredRef = React.useRef(false);
  const registerSelectedItem = useEventCallback(suppliedIndex => {
    if (suppliedIndex !== undefined) {
      hasRegisteredRef.current = true;
    }
    const index = suppliedIndex ?? valuesRef.current.indexOf(value);
    const hasIndex = index !== -1;
    if (hasIndex || value === null) {
      store.apply({
        selectedIndex: index,
        label: hasIndex ? labelsRef.current[index] ?? '' : ''
      });
      return;
    }
    if (process.env.NODE_ENV !== 'production') {
      if (value) {
        const stringValue = typeof value === 'string' || value === null ? value : JSON.stringify(value);
        warn(`The value \`${stringValue}\` is not present in the select items.`);
      }
    }
  });
  useModernLayoutEffect(() => {
    if (!hasRegisteredRef.current) {
      return;
    }
    registerSelectedItem(undefined);
  }, [value, registerSelectedItem]);
  const floatingContext = useFloatingRootContext({
    open,
    onOpenChange(nextOpen, event, reason) {
      setOpen(nextOpen, event, translateOpenChangeReason(reason));
    },
    elements: {
      reference: triggerElement,
      floating: positionerElement
    }
  });
  const click = useClick(floatingContext, {
    enabled: !readOnly && !disabled,
    event: 'mousedown'
  });
  const dismiss = useDismiss(floatingContext, {
    bubbles: false,
    outsidePressEvent: 'mousedown'
  });
  const role = useRole(floatingContext, {
    role: 'select'
  });
  const listNavigation = useListNavigation(floatingContext, {
    enabled: !readOnly && !disabled,
    listRef,
    activeIndex,
    selectedIndex,
    disabledIndices: EMPTY_ARRAY,
    onNavigate(nextActiveIndex) {
      // Retain the highlight while transitioning out.
      if (nextActiveIndex === null && !open) {
        return;
      }
      store.set('activeIndex', nextActiveIndex);
    },
    // Implement our own listeners since `onPointerLeave` on each option fires while scrolling with
    // the `alignItemWithTrigger=true`, causing a performance issue on Chrome.
    focusItemOnHover: false
  });
  const typeahead = useTypeahead(floatingContext, {
    enabled: !readOnly && !disabled,
    listRef: labelsRef,
    activeIndex,
    selectedIndex,
    onMatch(index) {
      if (open) {
        store.set('activeIndex', index);
      } else {
        setValue(valuesRef.current[index]);
      }
    },
    onTypingChange(typing) {
      // FIXME: Floating UI doesn't support allowing space to select an item while the popup is
      // closed and the trigger isn't a native <button>.
      typingRef.current = typing;
    }
  });
  const {
    getReferenceProps,
    getFloatingProps,
    getItemProps
  } = useInteractions([click, dismiss, role, listNavigation, typeahead]);
  useOnFirstRender(() => {
    // These should be initialized at store creation, but there is an interdependency
    // between some values used in floating hooks above.
    store.apply({
      popupProps: getFloatingProps(),
      triggerProps: getReferenceProps()
    });
  });

  // Store values that depend on other hooks
  React.useEffect(() => {
    store.apply({
      id,
      modal,
      value,
      open,
      mounted,
      transitionStatus,
      popupProps: getFloatingProps(),
      triggerProps: getReferenceProps()
    });
  }, [store, id, modal, value, open, mounted, transitionStatus, getFloatingProps, getReferenceProps]);
  const rootContext = React.useMemo(() => ({
    store,
    name,
    required,
    disabled,
    readOnly,
    setValue,
    setOpen,
    listRef,
    popupRef,
    getItemProps,
    events: floatingContext.events,
    valueRef,
    valuesRef,
    labelsRef,
    typingRef,
    selectionRef,
    selectedItemTextRef,
    fieldControlValidation,
    registerSelectedItem,
    onOpenChangeComplete,
    keyboardActiveRef,
    alignItemWithTriggerActiveRef,
    highlightTimeout
  }), [store, name, required, disabled, readOnly, setValue, setOpen, listRef, popupRef, getItemProps, floatingContext.events, valueRef, valuesRef, labelsRef, typingRef, selectionRef, selectedItemTextRef, fieldControlValidation, registerSelectedItem, onOpenChangeComplete, keyboardActiveRef, alignItemWithTriggerActiveRef, highlightTimeout]);
  return {
    rootContext,
    floatingContext,
    value
  };
}